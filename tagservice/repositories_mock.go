// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package tagservice is a generated GoMock package.
package tagservice

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockITagQueryRepository is a mock of ITagQueryRepository interface
type MockITagQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITagQueryRepositoryMockRecorder
}

// MockITagQueryRepositoryMockRecorder is the mock recorder for MockITagQueryRepository
type MockITagQueryRepositoryMockRecorder struct {
	mock *MockITagQueryRepository
}

// NewMockITagQueryRepository creates a new mock instance
func NewMockITagQueryRepository(ctrl *gomock.Controller) *MockITagQueryRepository {
	mock := &MockITagQueryRepository{ctrl: ctrl}
	mock.recorder = &MockITagQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITagQueryRepository) EXPECT() *MockITagQueryRepositoryMockRecorder {
	return m.recorder
}

// QueryTagsWhereTagType mocks base method
func (m *MockITagQueryRepository) QueryTagsWhereTagType(tagTypeId uint8) ([]*TagQueryDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTagsWhereTagType", tagTypeId)
	ret0, _ := ret[0].([]*TagQueryDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTagsWhereTagType indicates an expected call of QueryTagsWhereTagType
func (mr *MockITagQueryRepositoryMockRecorder) QueryTagsWhereTagType(tagTypeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTagsWhereTagType", reflect.TypeOf((*MockITagQueryRepository)(nil).QueryTagsWhereTagType), tagTypeId)
}
