// Code generated by MockGen. DO NOT EDIT.
// Source: ../../partyservice/domain.go

// Package testmock is a generated GoMock package.
package testmock

import (
	gomock "github.com/golang/mock/gomock"
	partyservice "github.com/momotaro98/mixlunch-service-api/partyservice"
	reflect "reflect"
)

// MockPartyServer is a mock of PartyServer interface
type MockPartyServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartyServerMockRecorder
}

// MockPartyServerMockRecorder is the mock recorder for MockPartyServer
type MockPartyServerMockRecorder struct {
	mock *MockPartyServer
}

// NewMockPartyServer creates a new mock instance
func NewMockPartyServer(ctrl *gomock.Controller) *MockPartyServer {
	mock := &MockPartyServer{ctrl: ctrl}
	mock.recorder = &MockPartyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPartyServer) EXPECT() *MockPartyServerMockRecorder {
	return m.recorder
}

// GetParties mocks base method
func (m *MockPartyServer) GetParties(beginDateTimeStr, endDateTimeStr string) (*partyservice.Parties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParties", beginDateTimeStr, endDateTimeStr)
	ret0, _ := ret[0].(*partyservice.Parties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParties indicates an expected call of GetParties
func (mr *MockPartyServerMockRecorder) GetParties(beginDateTimeStr, endDateTimeStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParties", reflect.TypeOf((*MockPartyServer)(nil).GetParties), beginDateTimeStr, endDateTimeStr)
}

// GetPartyByUserIdAndTimeRange mocks base method
func (m *MockPartyServer) GetPartyByUserIdAndTimeRange(userId, beginDateTimeStr, endDateTimeStr string) (*partyservice.Parties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyByUserIdAndTimeRange", userId, beginDateTimeStr, endDateTimeStr)
	ret0, _ := ret[0].(*partyservice.Parties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyByUserIdAndTimeRange indicates an expected call of GetPartyByUserIdAndTimeRange
func (mr *MockPartyServerMockRecorder) GetPartyByUserIdAndTimeRange(userId, beginDateTimeStr, endDateTimeStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyByUserIdAndTimeRange", reflect.TypeOf((*MockPartyServer)(nil).GetPartyByUserIdAndTimeRange), userId, beginDateTimeStr, endDateTimeStr)
}

// GetIsLatestPartyReviewDone mocks base method
func (m *MockPartyServer) GetIsLatestPartyReviewDone(userId string) (*partyservice.IsLatestReviewDone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsLatestPartyReviewDone", userId)
	ret0, _ := ret[0].(*partyservice.IsLatestReviewDone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsLatestPartyReviewDone indicates an expected call of GetIsLatestPartyReviewDone
func (mr *MockPartyServerMockRecorder) GetIsLatestPartyReviewDone(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsLatestPartyReviewDone", reflect.TypeOf((*MockPartyServer)(nil).GetIsLatestPartyReviewDone), userId)
}

// GetLastNPartiesOfAUser mocks base method
func (m *MockPartyServer) GetLastNPartiesOfAUser(userId string, n int) (*partyservice.Parties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastNPartiesOfAUser", userId, n)
	ret0, _ := ret[0].(*partyservice.Parties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNPartiesOfAUser indicates an expected call of GetLastNPartiesOfAUser
func (mr *MockPartyServerMockRecorder) GetLastNPartiesOfAUser(userId, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNPartiesOfAUser", reflect.TypeOf((*MockPartyServer)(nil).GetLastNPartiesOfAUser), userId, n)
}

// PostPartyReviewMember mocks base method
func (m *MockPartyServer) PostPartyReviewMember(reviewMember *partyservice.PartyReviewMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostPartyReviewMember", reviewMember)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostPartyReviewMember indicates an expected call of PostPartyReviewMember
func (mr *MockPartyServerMockRecorder) PostPartyReviewMember(reviewMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPartyReviewMember", reflect.TypeOf((*MockPartyServer)(nil).PostPartyReviewMember), reviewMember)
}

// UpsertParties mocks base method
func (m *MockPartyServer) UpsertParties(partyModel []*partyservice.PartyForCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertParties", partyModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertParties indicates an expected call of UpsertParties
func (mr *MockPartyServerMockRecorder) UpsertParties(partyModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertParties", reflect.TypeOf((*MockPartyServer)(nil).UpsertParties), partyModel)
}

// GenerateChatRoom mocks base method
func (m *MockPartyServer) GenerateChatRoom(chatRoomId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChatRoom", chatRoomId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateChatRoom indicates an expected call of GenerateChatRoom
func (mr *MockPartyServerMockRecorder) GenerateChatRoom(chatRoomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChatRoom", reflect.TypeOf((*MockPartyServer)(nil).GenerateChatRoom), chatRoomId)
}
