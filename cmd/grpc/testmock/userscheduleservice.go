// Code generated by MockGen. DO NOT EDIT.
// Source: ../../userscheduleservice/domain.go

// Package testmock is a generated GoMock package.
package testmock

import (
	gomock "github.com/golang/mock/gomock"
	userscheduleservice "github.com/momotaro98/mixlunch-service-api/userscheduleservice"
	reflect "reflect"
	time "time"
)

// MockUserScheduleServer is a mock of UserScheduleServer interface
type MockUserScheduleServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserScheduleServerMockRecorder
}

// MockUserScheduleServerMockRecorder is the mock recorder for MockUserScheduleServer
type MockUserScheduleServerMockRecorder struct {
	mock *MockUserScheduleServer
}

// NewMockUserScheduleServer creates a new mock instance
func NewMockUserScheduleServer(ctrl *gomock.Controller) *MockUserScheduleServer {
	mock := &MockUserScheduleServer{ctrl: ctrl}
	mock.recorder = &MockUserScheduleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserScheduleServer) EXPECT() *MockUserScheduleServerMockRecorder {
	return m.recorder
}

// GetUserSchedulesByTimeRange mocks base method
func (m *MockUserScheduleServer) GetUserSchedulesByTimeRange(userId, beginDateTimeStr, endDateTimeStr string) (*userscheduleservice.UserSchedules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSchedulesByTimeRange", userId, beginDateTimeStr, endDateTimeStr)
	ret0, _ := ret[0].(*userscheduleservice.UserSchedules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSchedulesByTimeRange indicates an expected call of GetUserSchedulesByTimeRange
func (mr *MockUserScheduleServerMockRecorder) GetUserSchedulesByTimeRange(userId, beginDateTimeStr, endDateTimeStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSchedulesByTimeRange", reflect.TypeOf((*MockUserScheduleServer)(nil).GetUserSchedulesByTimeRange), userId, beginDateTimeStr, endDateTimeStr)
}

// GetEachUserSchedules mocks base method
func (m *MockUserScheduleServer) GetEachUserSchedules(beginDateTimeStr, endDateTimeStr string) ([]*userscheduleservice.UserSchedules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEachUserSchedules", beginDateTimeStr, endDateTimeStr)
	ret0, _ := ret[0].([]*userscheduleservice.UserSchedules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEachUserSchedules indicates an expected call of GetEachUserSchedules
func (mr *MockUserScheduleServerMockRecorder) GetEachUserSchedules(beginDateTimeStr, endDateTimeStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEachUserSchedules", reflect.TypeOf((*MockUserScheduleServer)(nil).GetEachUserSchedules), beginDateTimeStr, endDateTimeStr)
}

// AddUserSchedule mocks base method
func (m *MockUserScheduleServer) AddUserSchedule(userId string, usComm *userscheduleservice.UserScheduleForCommand) (*userscheduleservice.UserSchedules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserSchedule", userId, usComm)
	ret0, _ := ret[0].(*userscheduleservice.UserSchedules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserSchedule indicates an expected call of AddUserSchedule
func (mr *MockUserScheduleServerMockRecorder) AddUserSchedule(userId, usComm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserSchedule", reflect.TypeOf((*MockUserScheduleServer)(nil).AddUserSchedule), userId, usComm)
}

// UpdateUserSchedule mocks base method
func (m *MockUserScheduleServer) UpdateUserSchedule(userId string, usComm *userscheduleservice.UserScheduleForCommand) (*userscheduleservice.UserSchedules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSchedule", userId, usComm)
	ret0, _ := ret[0].(*userscheduleservice.UserSchedules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSchedule indicates an expected call of UpdateUserSchedule
func (mr *MockUserScheduleServerMockRecorder) UpdateUserSchedule(userId, usComm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSchedule", reflect.TypeOf((*MockUserScheduleServer)(nil).UpdateUserSchedule), userId, usComm)
}

// DeleteUserSchedule mocks base method
func (m *MockUserScheduleServer) DeleteUserSchedule(userId string, targetDate time.Time) (*userscheduleservice.UserSchedules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSchedule", userId, targetDate)
	ret0, _ := ret[0].(*userscheduleservice.UserSchedules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserSchedule indicates an expected call of DeleteUserSchedule
func (mr *MockUserScheduleServerMockRecorder) DeleteUserSchedule(userId, targetDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSchedule", reflect.TypeOf((*MockUserScheduleServer)(nil).DeleteUserSchedule), userId, targetDate)
}
