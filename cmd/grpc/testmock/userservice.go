// Code generated by MockGen. DO NOT EDIT.
// Source: ../../userservice/domain.go

// Package testmock is a generated GoMock package.
package testmock

import (
	gomock "github.com/golang/mock/gomock"
	userservice "github.com/momotaro98/mixlunch-service-api/userservice"
	reflect "reflect"
)

// MockUserServer is a mock of UserServer interface
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// GetUserByUserId mocks base method
func (m *MockUserServer) GetUserByUserId(userId string) (*userservice.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserId", userId)
	ret0, _ := ret[0].(*userservice.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserId indicates an expected call of GetUserByUserId
func (mr *MockUserServerMockRecorder) GetUserByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserId", reflect.TypeOf((*MockUserServer)(nil).GetUserByUserId), userId)
}

// GetUserPublicByUserId mocks base method
func (m *MockUserServer) GetUserPublicByUserId(userId string) (*userservice.UserPublic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicByUserId", userId)
	ret0, _ := ret[0].(*userservice.UserPublic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicByUserId indicates an expected call of GetUserPublicByUserId
func (mr *MockUserServerMockRecorder) GetUserPublicByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicByUserId", reflect.TypeOf((*MockUserServer)(nil).GetUserPublicByUserId), userId)
}

// RegisterUser mocks base method
func (m *MockUserServer) RegisterUser(newUser *userservice.UserForCommand) (*userservice.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", newUser)
	ret0, _ := ret[0].(*userservice.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser
func (mr *MockUserServerMockRecorder) RegisterUser(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserServer)(nil).RegisterUser), newUser)
}

// RegisterUserBlock mocks base method
func (m *MockUserServer) RegisterUserBlock(newUserBlock *userservice.UserBlockForCommand) ([]*userservice.UserBlockForQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUserBlock", newUserBlock)
	ret0, _ := ret[0].([]*userservice.UserBlockForQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUserBlock indicates an expected call of RegisterUserBlock
func (mr *MockUserServerMockRecorder) RegisterUserBlock(newUserBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUserBlock", reflect.TypeOf((*MockUserServer)(nil).RegisterUserBlock), newUserBlock)
}
