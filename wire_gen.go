// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/momotaro98/mixlunch-service-api/logger"
	"github.com/momotaro98/mixlunch-service-api/partyservice"
	"github.com/momotaro98/mixlunch-service-api/tagservice"
	"github.com/momotaro98/mixlunch-service-api/userscheduleservice"
	"github.com/momotaro98/mixlunch-service-api/userservice"
)

// Injectors from wire.go:

func initializeUserScheduleHandler(loggerConfig *logger.Config, userScheduleServiceConfig *userscheduleservice.Config, tagServiceConfig *tagservice.Config) *UserScheduleHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userscheduleservice.ProvideDB(userScheduleServiceConfig)
	iUserScheduleQueryRepository := userscheduleservice.ProvideUserScheduleRepository(sqlDb)
	iUserScheduleCommandRepository := userscheduleservice.ProvideRealUserScheduleUpdateRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	userScheduleServer := userscheduleservice.ProvideUserScheduleServer(iUserScheduleQueryRepository, iUserScheduleCommandRepository, tagServer)
	userScheduleHandler := provideUserScheduleHandler(loggerLogger, userScheduleServer)
	return userScheduleHandler
}

func initializeUpdateUserScheduleHandler(loggerConfig *logger.Config, userScheduleServiceConfig *userscheduleservice.Config, tagServiceConfig *tagservice.Config) *UpdateUserScheduleHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userscheduleservice.ProvideDB(userScheduleServiceConfig)
	iUserScheduleQueryRepository := userscheduleservice.ProvideUserScheduleRepository(sqlDb)
	iUserScheduleCommandRepository := userscheduleservice.ProvideRealUserScheduleUpdateRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	userScheduleServer := userscheduleservice.ProvideUserScheduleServer(iUserScheduleQueryRepository, iUserScheduleCommandRepository, tagServer)
	updateUserScheduleHandler := provideUpdateUserScheduleHandler(loggerLogger, userScheduleServer)
	return updateUserScheduleHandler
}

func initializeDeleteUserScheduleHandler(loggerConfig *logger.Config, userScheduleServiceConfig *userscheduleservice.Config, tagServiceConfig *tagservice.Config) *DeleteUserScheduleHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userscheduleservice.ProvideDB(userScheduleServiceConfig)
	iUserScheduleQueryRepository := userscheduleservice.ProvideUserScheduleRepository(sqlDb)
	iUserScheduleCommandRepository := userscheduleservice.ProvideRealUserScheduleUpdateRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	userScheduleServer := userscheduleservice.ProvideUserScheduleServer(iUserScheduleQueryRepository, iUserScheduleCommandRepository, tagServer)
	deleteUserScheduleHandler := provideDeleteUserScheduleHandler(loggerLogger, userScheduleServer)
	return deleteUserScheduleHandler
}

func initializeAddUserScheduleHandler(loggerConfig *logger.Config, userScheduleServiceConfig *userscheduleservice.Config, tagServiceConfig *tagservice.Config) *AddUserScheduleHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userscheduleservice.ProvideDB(userScheduleServiceConfig)
	iUserScheduleQueryRepository := userscheduleservice.ProvideUserScheduleRepository(sqlDb)
	iUserScheduleCommandRepository := userscheduleservice.ProvideRealUserScheduleUpdateRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	userScheduleServer := userscheduleservice.ProvideUserScheduleServer(iUserScheduleQueryRepository, iUserScheduleCommandRepository, tagServer)
	addUserScheduleHandler := provideAddUserScheduleHandler(loggerLogger, userScheduleServer)
	return addUserScheduleHandler
}

func initializePartyHandler(loggerConfig *logger.Config, partyServiceConfig *partyservice.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *PartyHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := partyservice.ProvideDB(partyServiceConfig)
	iPartyQueryRepository := partyservice.ProvidePartyQueryRepository(sqlDb)
	iPartyCommandRepository := partyservice.ProvidePartyCommandRepository(sqlDb)
	userserviceSqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(userserviceSqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(userserviceSqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	app := partyservice.ProvideApp(partyServiceConfig)
	iChatRoomRepository := partyservice.ProvideChatRoomRepository(app)
	partyServer := partyservice.ProvidePartyServer(iPartyQueryRepository, iPartyCommandRepository, userServer, tagServer, iChatRoomRepository)
	partyHandler := providePartyHandler(loggerLogger, partyServer)
	return partyHandler
}

func initializePartyReviewMemberHandler(loggerConfig *logger.Config, partyServiceConfig *partyservice.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *PartyReviewMemberHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := partyservice.ProvideDB(partyServiceConfig)
	iPartyQueryRepository := partyservice.ProvidePartyQueryRepository(sqlDb)
	iPartyCommandRepository := partyservice.ProvidePartyCommandRepository(sqlDb)
	userserviceSqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(userserviceSqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(userserviceSqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	app := partyservice.ProvideApp(partyServiceConfig)
	iChatRoomRepository := partyservice.ProvideChatRoomRepository(app)
	partyServer := partyservice.ProvidePartyServer(iPartyQueryRepository, iPartyCommandRepository, userServer, tagServer, iChatRoomRepository)
	partyReviewMemberHandler := providePartyReviewMemberHandler(loggerLogger, partyServer)
	return partyReviewMemberHandler
}

func initializePartyReviewMemberDoneHandler(loggerConfig *logger.Config, partyServiceConfig *partyservice.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *PartyReviewMemberDoneHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := partyservice.ProvideDB(partyServiceConfig)
	iPartyQueryRepository := partyservice.ProvidePartyQueryRepository(sqlDb)
	iPartyCommandRepository := partyservice.ProvidePartyCommandRepository(sqlDb)
	userserviceSqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(userserviceSqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(userserviceSqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	app := partyservice.ProvideApp(partyServiceConfig)
	iChatRoomRepository := partyservice.ProvideChatRoomRepository(app)
	partyServer := partyservice.ProvidePartyServer(iPartyQueryRepository, iPartyCommandRepository, userServer, tagServer, iChatRoomRepository)
	partyReviewMemberDoneHandler := providePartyReviewMemberDoneHandler(loggerLogger, partyServer)
	return partyReviewMemberDoneHandler
}

func initializeTagsHandler(loggerConfig *logger.Config, tagServiceConfig *tagservice.Config) *TagsHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(sqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	tagsHandler := provideTagsHandler(loggerLogger, tagServer)
	return tagsHandler
}

func initializeUserHandler(loggerConfig *logger.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *UserHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(sqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	userHandler := provideUserHandler(loggerLogger, userServer)
	return userHandler
}

func initializeUserPublicHandler(loggerConfig *logger.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *UserPublicHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(sqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	userPublicHandler := provideUserPublicHandler(loggerLogger, userServer)
	return userPublicHandler
}

func initializeUserRegisterHandler(loggerConfig *logger.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *UserRegisterHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(sqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	userRegisterHandler := provideUserRegisterHandler(loggerLogger, userServer)
	return userRegisterHandler
}

func initializeUserBlockRegisterHandler(loggerConfig *logger.Config, userServiceConfig *userservice.Config, tagServiceConfig *tagservice.Config) *UserBlockRegisterHandler {
	loggerLogger := logger.ProvideLogger(loggerConfig)
	sqlDb := userservice.ProvideDB(userServiceConfig)
	iUserQueryRepository := userservice.ProvideUserQueryRepository(sqlDb)
	tagserviceSqlDb := tagservice.ProvideDB(tagServiceConfig)
	iTagQueryRepository := tagservice.ProvideTagQueryRepository(tagserviceSqlDb)
	tagServer := tagservice.ProvideTagServer(iTagQueryRepository)
	iUserCommandRepository := userservice.ProvideUserCommandRepository(sqlDb)
	userServer := userservice.ProvideUserServer(iUserQueryRepository, tagServer, iUserCommandRepository)
	userBlockRegisterHandler := provideUserBlockRegisterHandler(loggerLogger, userServer)
	return userBlockRegisterHandler
}
