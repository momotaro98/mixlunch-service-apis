// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package userservice is a generated GoMock package.
package userservice

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUserQueryRepository is a mock of IUserQueryRepository interface
type MockIUserQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserQueryRepositoryMockRecorder
}

// MockIUserQueryRepositoryMockRecorder is the mock recorder for MockIUserQueryRepository
type MockIUserQueryRepositoryMockRecorder struct {
	mock *MockIUserQueryRepository
}

// NewMockIUserQueryRepository creates a new mock instance
func NewMockIUserQueryRepository(ctrl *gomock.Controller) *MockIUserQueryRepository {
	mock := &MockIUserQueryRepository{ctrl: ctrl}
	mock.recorder = &MockIUserQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserQueryRepository) EXPECT() *MockIUserQueryRepositoryMockRecorder {
	return m.recorder
}

// QueryUserFullByUsingUserId mocks base method
func (m *MockIUserQueryRepository) QueryUserFullByUsingUserId(userId string) (*UserFullQueryDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserFullByUsingUserId", userId)
	ret0, _ := ret[0].(*UserFullQueryDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserFullByUsingUserId indicates an expected call of QueryUserFullByUsingUserId
func (mr *MockIUserQueryRepositoryMockRecorder) QueryUserFullByUsingUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserFullByUsingUserId", reflect.TypeOf((*MockIUserQueryRepository)(nil).QueryUserFullByUsingUserId), userId)
}

// QueryUserBlockWhereBlocker mocks base method
func (m *MockIUserQueryRepository) QueryUserBlockWhereBlocker(blocker string) ([]*UserBlockQueryDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserBlockWhereBlocker", blocker)
	ret0, _ := ret[0].([]*UserBlockQueryDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserBlockWhereBlocker indicates an expected call of QueryUserBlockWhereBlocker
func (mr *MockIUserQueryRepositoryMockRecorder) QueryUserBlockWhereBlocker(blocker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserBlockWhereBlocker", reflect.TypeOf((*MockIUserQueryRepository)(nil).QueryUserBlockWhereBlocker), blocker)
}

// MockIUserCommandRepository is a mock of IUserCommandRepository interface
type MockIUserCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserCommandRepositoryMockRecorder
}

// MockIUserCommandRepositoryMockRecorder is the mock recorder for MockIUserCommandRepository
type MockIUserCommandRepositoryMockRecorder struct {
	mock *MockIUserCommandRepository
}

// NewMockIUserCommandRepository creates a new mock instance
func NewMockIUserCommandRepository(ctrl *gomock.Controller) *MockIUserCommandRepository {
	mock := &MockIUserCommandRepository{ctrl: ctrl}
	mock.recorder = &MockIUserCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserCommandRepository) EXPECT() *MockIUserCommandRepositoryMockRecorder {
	return m.recorder
}

// InsertUserInfo mocks base method
func (m *MockIUserCommandRepository) InsertUserInfo(user *UserCommandDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserInfo", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserInfo indicates an expected call of InsertUserInfo
func (mr *MockIUserCommandRepositoryMockRecorder) InsertUserInfo(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserInfo", reflect.TypeOf((*MockIUserCommandRepository)(nil).InsertUserInfo), user)
}

// InsertUserBlock mocks base method
func (m *MockIUserCommandRepository) InsertUserBlock(userBlock *UserBlockCommandDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserBlock", userBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserBlock indicates an expected call of InsertUserBlock
func (mr *MockIUserCommandRepositoryMockRecorder) InsertUserBlock(userBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserBlock", reflect.TypeOf((*MockIUserCommandRepository)(nil).InsertUserBlock), userBlock)
}
