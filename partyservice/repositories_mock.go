// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package partyservice is a generated GoMock package.
package partyservice

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIPartyQueryRepository is a mock of IPartyQueryRepository interface
type MockIPartyQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartyQueryRepositoryMockRecorder
}

// MockIPartyQueryRepositoryMockRecorder is the mock recorder for MockIPartyQueryRepository
type MockIPartyQueryRepositoryMockRecorder struct {
	mock *MockIPartyQueryRepository
}

// NewMockIPartyQueryRepository creates a new mock instance
func NewMockIPartyQueryRepository(ctrl *gomock.Controller) *MockIPartyQueryRepository {
	mock := &MockIPartyQueryRepository{ctrl: ctrl}
	mock.recorder = &MockIPartyQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartyQueryRepository) EXPECT() *MockIPartyQueryRepositoryMockRecorder {
	return m.recorder
}

// QueryPartiesWhereTimeRange mocks base method
func (m *MockIPartyQueryRepository) QueryPartiesWhereTimeRange(queryDto *PartyQueryDto) ([]*PartyDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPartiesWhereTimeRange", queryDto)
	ret0, _ := ret[0].([]*PartyDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartiesWhereTimeRange indicates an expected call of QueryPartiesWhereTimeRange
func (mr *MockIPartyQueryRepositoryMockRecorder) QueryPartiesWhereTimeRange(queryDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartiesWhereTimeRange", reflect.TypeOf((*MockIPartyQueryRepository)(nil).QueryPartiesWhereTimeRange), queryDto)
}

// QueryPartiesWhereUserIdAndTimeRange mocks base method
func (m *MockIPartyQueryRepository) QueryPartiesWhereUserIdAndTimeRange(userId string, queryDto *PartyQueryDto) ([]*PartyDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPartiesWhereUserIdAndTimeRange", userId, queryDto)
	ret0, _ := ret[0].([]*PartyDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartiesWhereUserIdAndTimeRange indicates an expected call of QueryPartiesWhereUserIdAndTimeRange
func (mr *MockIPartyQueryRepositoryMockRecorder) QueryPartiesWhereUserIdAndTimeRange(userId, queryDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartiesWhereUserIdAndTimeRange", reflect.TypeOf((*MockIPartyQueryRepository)(nil).QueryPartiesWhereUserIdAndTimeRange), userId, queryDto)
}

// QueryPartiesWhereUserIdLastN mocks base method
func (m *MockIPartyQueryRepository) QueryPartiesWhereUserIdLastN(userId string, n int) ([]*PartyDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPartiesWhereUserIdLastN", userId, n)
	ret0, _ := ret[0].([]*PartyDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartiesWhereUserIdLastN indicates an expected call of QueryPartiesWhereUserIdLastN
func (mr *MockIPartyQueryRepositoryMockRecorder) QueryPartiesWhereUserIdLastN(userId, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartiesWhereUserIdLastN", reflect.TypeOf((*MockIPartyQueryRepository)(nil).QueryPartiesWhereUserIdLastN), userId, n)
}

// QueryPartyMembersWherePartyId mocks base method
func (m *MockIPartyQueryRepository) QueryPartyMembersWherePartyId(partyId int64) ([]*PartyMemberDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPartyMembersWherePartyId", partyId)
	ret0, _ := ret[0].([]*PartyMemberDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartyMembersWherePartyId indicates an expected call of QueryPartyMembersWherePartyId
func (mr *MockIPartyQueryRepositoryMockRecorder) QueryPartyMembersWherePartyId(partyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartyMembersWherePartyId", reflect.TypeOf((*MockIPartyQueryRepository)(nil).QueryPartyMembersWherePartyId), partyId)
}

// QueryPartyTagsWherePartyId mocks base method
func (m *MockIPartyQueryRepository) QueryPartyTagsWherePartyId(partyId int64) (*PartyTagsDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPartyTagsWherePartyId", partyId)
	ret0, _ := ret[0].(*PartyTagsDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartyTagsWherePartyId indicates an expected call of QueryPartyTagsWherePartyId
func (mr *MockIPartyQueryRepositoryMockRecorder) QueryPartyTagsWherePartyId(partyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartyTagsWherePartyId", reflect.TypeOf((*MockIPartyQueryRepository)(nil).QueryPartyTagsWherePartyId), partyId)
}

// QueryPartyReviewMembers mocks base method
func (m *MockIPartyQueryRepository) QueryPartyReviewMembers(queryDto *ReviewMemberQueryDto) ([]*PartyMemberReviewDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPartyReviewMembers", queryDto)
	ret0, _ := ret[0].([]*PartyMemberReviewDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartyReviewMembers indicates an expected call of QueryPartyReviewMembers
func (mr *MockIPartyQueryRepositoryMockRecorder) QueryPartyReviewMembers(queryDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartyReviewMembers", reflect.TypeOf((*MockIPartyQueryRepository)(nil).QueryPartyReviewMembers), queryDto)
}

// MockIPartyCommandRepository is a mock of IPartyCommandRepository interface
type MockIPartyCommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPartyCommandRepositoryMockRecorder
}

// MockIPartyCommandRepositoryMockRecorder is the mock recorder for MockIPartyCommandRepository
type MockIPartyCommandRepositoryMockRecorder struct {
	mock *MockIPartyCommandRepository
}

// NewMockIPartyCommandRepository creates a new mock instance
func NewMockIPartyCommandRepository(ctrl *gomock.Controller) *MockIPartyCommandRepository {
	mock := &MockIPartyCommandRepository{ctrl: ctrl}
	mock.recorder = &MockIPartyCommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPartyCommandRepository) EXPECT() *MockIPartyCommandRepositoryMockRecorder {
	return m.recorder
}

// Tran mocks base method
func (m *MockIPartyCommandRepository) Tran() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tran")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tran indicates an expected call of Tran
func (mr *MockIPartyCommandRepositoryMockRecorder) Tran() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tran", reflect.TypeOf((*MockIPartyCommandRepository)(nil).Tran))
}

// Commit mocks base method
func (m *MockIPartyCommandRepository) Commit(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockIPartyCommandRepositoryMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIPartyCommandRepository)(nil).Commit), arg0)
}

// Rollback mocks base method
func (m *MockIPartyCommandRepository) Rollback(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockIPartyCommandRepositoryMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockIPartyCommandRepository)(nil).Rollback), arg0)
}

// InsertParty mocks base method
func (m *MockIPartyCommandRepository) InsertParty(tx *sql.Tx, dto *PartyCommandDto) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertParty", tx, dto)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertParty indicates an expected call of InsertParty
func (mr *MockIPartyCommandRepositoryMockRecorder) InsertParty(tx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertParty", reflect.TypeOf((*MockIPartyCommandRepository)(nil).InsertParty), tx, dto)
}

// DeletePartiesWithADay mocks base method
func (m *MockIPartyCommandRepository) DeletePartiesWithADay(tx *sql.Tx, targetDay time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartiesWithADay", tx, targetDay)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartiesWithADay indicates an expected call of DeletePartiesWithADay
func (mr *MockIPartyCommandRepositoryMockRecorder) DeletePartiesWithADay(tx, targetDay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartiesWithADay", reflect.TypeOf((*MockIPartyCommandRepository)(nil).DeletePartiesWithADay), tx, targetDay)
}

// InsertPartyMemberReview mocks base method
func (m *MockIPartyCommandRepository) InsertPartyMemberReview(tx *sql.Tx, dto *PartyMemberReviewDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPartyMemberReview", tx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPartyMemberReview indicates an expected call of InsertPartyMemberReview
func (mr *MockIPartyCommandRepositoryMockRecorder) InsertPartyMemberReview(tx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPartyMemberReview", reflect.TypeOf((*MockIPartyCommandRepository)(nil).InsertPartyMemberReview), tx, dto)
}

// MockIChatRoomRepository is a mock of IChatRoomRepository interface
type MockIChatRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIChatRoomRepositoryMockRecorder
}

// MockIChatRoomRepositoryMockRecorder is the mock recorder for MockIChatRoomRepository
type MockIChatRoomRepositoryMockRecorder struct {
	mock *MockIChatRoomRepository
}

// NewMockIChatRoomRepository creates a new mock instance
func NewMockIChatRoomRepository(ctrl *gomock.Controller) *MockIChatRoomRepository {
	mock := &MockIChatRoomRepository{ctrl: ctrl}
	mock.recorder = &MockIChatRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIChatRoomRepository) EXPECT() *MockIChatRoomRepositoryMockRecorder {
	return m.recorder
}

// CreateChatRoom mocks base method
func (m *MockIChatRoomRepository) CreateChatRoom(chatRoomId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatRoom", chatRoomId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChatRoom indicates an expected call of CreateChatRoom
func (mr *MockIChatRoomRepositoryMockRecorder) CreateChatRoom(chatRoomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatRoom", reflect.TypeOf((*MockIChatRoomRepository)(nil).CreateChatRoom), chatRoomId)
}
